// generaTed by fileb0x at "2017-03-12 23:23:40.169054028 +0100 CET" from config file "ab0x.yaml"

package templates

import (
	"bytes"
	"compress/gzip"
	"io"
	"log"
	"net/http"
	"os"

	"golang.org/x/net/context"
	"golang.org/x/net/webdav"
)

var (
	// CTX is a context for webdav vfs
	CTX = context.Background()

	// FS is a virtual memory file system
	FS = webdav.NewMemFS()

	// Handler is used to server files through a http handler
	Handler *webdav.Handler

	// HTTP is the http file system
	HTTP http.FileSystem = new(HTTPFS)
)

// HTTPFS implements http.FileSystem
type HTTPFS struct{}

// File404HTML is "./404.html"
var File404HTML = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x55\x5d\xaf\xdb\x36\x0c\x7d\xbf\xbf\x82\xf5\x50\x6c\x03\xac\xc4\xc1\x4d\xd6\x3b\xcf\x0e\xd0\x75\x1d\xd6\x87\xad\xc3\xda\x02\xbb\x8f\x8a\x4d\xdb\x44\x64\xd1\x93\xe8\xa4\xd9\xb0\xff\x5e\x38\x5f\x56\xd3\x34\xb8\x31\x10\x4b\x3c\x24\x75\x78\x24\xd1\xd9\xb3\x5f\xde\xbe\x7a\xff\xf8\xe7\x6b\x68\xa4\x35\xcb\xbb\x6c\x78\x81\xd1\xb6\xce\x23\xb4\xd1\xf2\x0e\x20\x6b\x50\x97\xc3\x00\x20\x6b\x51\x34\x14\x8d\x76\x1e\x25\x8f\x7a\xa9\xd4\x43\x14\x42\x8d\x48\xa7\xf0\x9f\x9e\x36\x79\xf4\xb7\xfa\xf0\x52\xbd\xe2\xb6\xd3\x42\x2b\x83\x11\x14\x6c\x05\xad\xe4\xd1\x9b\xd7\x39\x96\x35\x7e\x16\x69\x75\x8b\x79\xb4\x21\xdc\x76\xec\x24\x70\xde\x52\x29\x4d\x5e\xe2\x86\x0a\x54\xfb\x49\x0c\x64\x49\x48\x1b\xe5\x0b\x6d\x30\x9f\xc5\xe0\x1b\x47\x76\xad\x84\x55\x45\x92\x5b\xbe\x92\xda\xf1\x8a\xc5\x07\x89\x2d\x93\x2d\xf1\x63\x0c\x96\x2b\x36\x86\xb7\xd1\xf2\xee\x10\x25\x24\x06\x97\x6f\xb9\xf3\xcf\xe0\x91\xfb\x6f\x1d\x82\x61\x2f\x93\x6c\x7a\x40\x8e\x6e\x5e\x76\xc3\x04\xf6\xbf\x41\xb7\xf8\x38\x5e\x71\xb9\x83\xff\x8e\x13\x80\x06\xa9\x6e\x24\x85\x59\x92\x3c\xff\xe9\x6c\x6d\xc9\xaa\xaf\x20\xda\xd5\x64\x53\x48\x46\x53\xa7\xcb\x92\x6c\x1d\xd8\xfe\xbf\xbb\xbe\x58\xd1\x3b\xcf\x2e\x85\x12\x2b\xdd\x1b\x19\x53\x54\x6c\x45\x55\xba\x25\xb3\x4b\x41\xe9\xae\x33\xa8\xfc\xce\x0b\xb6\x31\x1c\xde\xaa\xa7\x18\x7e\x36\x64\xd7\xbf\xeb\xe2\xdd\xde\xf4\x2b\x5b\x89\x21\x7a\x87\x35\x23\x7c\x78\x13\xc5\xf0\xd7\x20\x23\xc7\x10\xfd\x86\x66\x83\x42\x85\x86\x3f\xb0\xc7\x28\x86\x97\x8e\xb4\x89\xc1\x6b\xeb\x95\x47\x47\xd5\xc5\xda\x9e\xfe\xc5\x14\x92\xc9\xc3\x8b\x85\xc3\xf6\x02\xdc\x1e\x95\xb0\xec\x5a\x6d\x46\xd0\x90\xc5\x51\xa6\xc9\x62\x44\x0a\x36\x43\x9d\xdf\xdc\x3f\xdc\xe3\x7c\x35\xda\x57\xba\x58\xd7\x8e\x7b\x5b\xaa\x93\x4b\xb5\x18\x9e\x2f\x94\x6b\x66\x81\x6e\x01\xc5\xf9\xe4\x06\xc1\xfb\x24\xf9\x2a\xbb\x59\x10\x63\x58\x4b\x0a\x06\x2b\xb9\xb2\xb1\x43\x25\xc1\x12\x23\xa3\xf9\x75\x46\xb3\x0b\x46\xe3\x71\x98\xbc\x70\xd8\x42\x32\x3c\x37\x0e\xd0\x79\x81\xee\x32\xff\xa9\xac\xc5\xd3\xca\x3a\x29\xfa\x63\xa9\x13\xfd\x70\xeb\x7c\xde\x62\x31\xd9\x3a\xdd\x75\xe8\x02\x32\x1d\x7b\x12\x62\x9b\x82\x43\xa3\x85\x36\x38\x26\x12\xee\x06\x82\xc1\x0d\x51\x5b\x5c\xad\x49\x94\x38\x6d\x7d\xc5\xae\x4d\x61\x3f\x34\x5a\xf0\xf1\x3b\xf5\x43\xf2\xfc\xfb\xc0\xb9\xf5\x4f\x73\x7c\x82\xd3\x58\xc2\xd0\x46\x34\xd9\xcf\x8a\xd8\x77\xa7\x14\x16\x8b\xa4\xfb\x78\x6d\xd7\x75\x2f\x3c\x66\x1a\xfe\xb3\xe9\xb9\x89\x64\xd3\x53\x9f\xcd\x86\x2b\x7d\x6c\x60\x25\x6d\xa0\x30\xda\xfb\x3c\x3a\x8a\x16\x9d\x3a\x4e\x88\x9d\xd9\x9c\xd1\xa1\x6f\xcf\xc6\x09\xc0\x3c\x99\x8f\xd0\x74\xc0\x02\xcf\x79\xe8\xf9\x65\xe3\x0b\x03\xe7\x61\x60\x17\xc6\xbd\x6f\x10\x3a\x5d\x23\xec\xb8\x07\xbd\x8f\xe5\x35\xd9\x1a\x2a\x76\xb0\xd5\x1e\x2c\x0b\x54\xc3\xcd\x0c\x13\x9e\x53\x64\xd3\x92\x36\xc7\xb2\x4f\xc3\x6c\x7a\xd0\x22\x9b\x1e\x3e\x4f\x9f\x02\x00\x00\xff\xff\xce\x5a\x02\xd5\xaf\x06\x00\x00")

// File500HTML is "./500.html"
var File500HTML = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x55\x5d\x8f\xdb\x36\x10\x7c\xbf\x5f\xb1\x51\x11\xa0\x05\x44\x5b\xc6\xd9\xcd\x55\x95\x0e\x48\xd3\x14\xc9\x43\x3f\xd0\x24\x40\xf3\xb8\x96\x56\xd6\xe2\x28\x52\x25\x57\x72\xdc\xa2\xff\xbd\xa0\xbf\xc4\x5c\x1c\xe3\x4e\xc0\x89\xdc\x1d\x0e\x67\x87\xd4\xba\x78\xf6\xf3\xef\xaf\xde\x7f\xfc\xe3\x35\xb4\xd2\xe9\xfb\x9b\x22\xbc\x40\xa3\xd9\x94\x09\x99\xe4\xfe\x06\xa0\x68\x09\xeb\x30\x00\x28\x3a\x12\x84\xaa\x45\xe7\x49\xca\x64\x90\x46\xdd\x25\x71\xaa\x15\xe9\x15\xfd\x3d\xf0\x58\x26\x7f\xa9\x0f\x2f\xd5\x2b\xdb\xf5\x28\xbc\xd6\x94\x40\x65\x8d\x90\x91\x32\x79\xfb\xba\xa4\x7a\x43\x9f\xad\x34\xd8\x51\x99\x8c\x4c\xdb\xde\x3a\x89\xc0\x5b\xae\xa5\x2d\x6b\x1a\xb9\x22\xb5\x9f\xa4\xc0\x86\x85\x51\x2b\x5f\xa1\xa6\x72\x91\x82\x6f\x1d\x9b\x07\x25\x56\x35\x2c\xa5\xb1\x17\xa8\x9d\x5d\x5b\xf1\x11\xb1\xb1\x6c\x6a\xfa\x94\x82\xb1\x8d\xd5\xda\x6e\x93\xfb\x9b\xc3\x2a\x61\xd1\x74\xff\xc6\x0e\x5e\xac\x49\x61\x4b\xd0\xe2\x48\x80\xd0\x3b\xbb\xd6\xd4\x3d\x2b\xe6\x07\xc8\x11\xef\x65\x17\x26\xb0\xff\x0b\x06\xa6\xc7\xf1\xda\xd6\x3b\xf8\xf7\x38\x01\x68\x89\x37\xad\xe4\xb0\xc8\xb2\xe7\x3f\x9e\xa3\x1d\x1b\xf5\x95\x0c\xba\x0d\x9b\x1c\xb2\x29\xd4\x63\x5d\xb3\xd9\x44\xb1\xff\x6e\x2e\x6f\x56\x0d\xce\x5b\x97\x43\x4d\x0d\x0e\x5a\x26\x8a\xc6\x1a\x51\x0d\x76\xac\x77\x39\x28\xec\x7b\x4d\xca\xef\xbc\x50\x97\xc2\xe1\xad\x06\x4e\xe1\x27\xcd\xe6\xe1\x57\xac\xde\xed\x43\xbf\x58\x23\x29\x24\xef\x68\x63\x09\x3e\xbc\x4d\x52\xf8\x33\xf8\x69\x53\x48\xde\x90\x1e\x49\xb8\x42\xf8\x8d\x06\x4a\x52\x78\xe9\x18\x75\x0a\x1e\x8d\x57\x9e\x1c\x37\x8f\xf6\xf6\xfc\x0f\xe5\x90\xcd\xee\x5e\xac\x1c\x75\x8f\x92\xdb\xa3\x13\xc6\xba\x0e\xf5\x94\xd4\x6c\x68\xb2\x69\xb6\x9a\x32\x95\xd5\xa1\xce\x6f\x6e\xef\x6e\x69\xb9\x9e\xe2\x6b\xac\x1e\x36\xce\x0e\xa6\x56\x27\x48\xb3\x0a\xcf\x17\xce\xb5\x8b\xc8\xb7\x48\xe2\x72\x76\x45\xe0\x6d\x96\x7d\x55\xdd\x22\x5a\xa3\x2d\x4a\x0e\x9a\x1a\xb9\x70\xb0\xa1\x92\x68\x8b\x49\xd1\xf2\xb2\xa2\xc5\x23\x45\xd3\x75\x98\xbd\x70\xd4\x41\x16\x9e\x2b\x17\xe8\xbc\x41\xff\x98\xff\x54\xd6\xea\x69\x65\x9d\x1c\xfd\xa1\xc6\x0c\xef\xae\xdd\xcf\x6b\x2a\x66\x5b\x87\x7d\x4f\x2e\x12\xd3\x5b\xcf\xc2\xd6\xe4\xe0\x48\xa3\xf0\x48\x13\x91\xd8\x3e\x08\x8c\xbe\x10\xb5\xa5\xf5\x03\x8b\x12\x87\xc6\x37\xd6\x75\x39\xec\x87\x1a\x85\x3e\x7e\xab\xbe\xcf\x9e\x7f\x17\x81\x3b\xff\x34\xe0\x13\x40\x53\x09\xa1\x9f\x20\x9b\xcf\x8a\xd8\xb7\xa9\x1c\x56\xab\xac\xff\x74\xe9\xd4\x71\x10\x3b\x31\x85\xff\xc5\xfc\xdc\x44\x8a\xf9\xa9\xe1\x16\xe1\x93\x3e\x76\xb2\x9a\x47\xa8\x34\x7a\x5f\x26\x47\xd3\x92\x53\xc7\x89\x73\x67\x35\xe7\x6c\x68\xe0\x8b\x69\x02\xe1\x84\xa7\xd4\x3c\xe4\x22\xe4\x32\x46\x5e\xe9\x80\x31\xc3\x32\x66\xe8\x63\x82\xf7\x2d\x41\x8f\x1b\x02\xf6\x20\xd4\xf5\xd6\xa1\x63\xbd\x83\xc1\xe0\x88\xac\x71\xad\x69\x16\x31\x9d\xd7\x16\xf3\x9a\xc7\x63\xe1\xa7\x61\x31\x3f\xb8\x51\xcc\x0f\xbf\x54\xff\x07\x00\x00\xff\xff\xfd\x7d\x94\x52\xba\x06\x00\x00")

func init() {
	if CTX.Err() != nil {
		log.Fatal(CTX.Err())
	}

	var err error

	var f webdav.File

	var rb *bytes.Reader
	var r *gzip.Reader

	rb = bytes.NewReader(File404HTML)
	r, err = gzip.NewReader(rb)
	if err != nil {
		log.Fatal(err)
	}

	err = r.Close()
	if err != nil {
		log.Fatal(err)
	}

	f, err = FS.OpenFile(CTX, "./404.html", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
	if err != nil {
		log.Fatal(err)
	}

	_, err = io.Copy(f, r)
	if err != nil {
		log.Fatal(err)
	}

	err = f.Close()
	if err != nil {
		log.Fatal(err)
	}

	rb = bytes.NewReader(File500HTML)
	r, err = gzip.NewReader(rb)
	if err != nil {
		log.Fatal(err)
	}

	err = r.Close()
	if err != nil {
		log.Fatal(err)
	}

	f, err = FS.OpenFile(CTX, "./500.html", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
	if err != nil {
		log.Fatal(err)
	}

	_, err = io.Copy(f, r)
	if err != nil {
		log.Fatal(err)
	}

	err = f.Close()
	if err != nil {
		log.Fatal(err)
	}

	Handler = &webdav.Handler{
		FileSystem: FS,
		LockSystem: webdav.NewMemLS(),
	}
}

// Open a file
func (hfs *HTTPFS) Open(path string) (http.File, error) {
	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	return f, nil
}

// ReadFile is adapTed from ioutil
func ReadFile(path string) ([]byte, error) {
	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	buf := bytes.NewBuffer(make([]byte, 0, bytes.MinRead))

	// If the buffer overflows, we will get bytes.ErrTooLarge.
	// Return that as an error. Any other panic remains.
	defer func() {
		e := recover()
		if e == nil {
			return
		}
		if panicErr, ok := e.(error); ok && panicErr == bytes.ErrTooLarge {
			err = panicErr
		} else {
			panic(e)
		}
	}()
	_, err = buf.ReadFrom(f)
	return buf.Bytes(), err
}

// WriteFile is adapTed from ioutil
func WriteFile(filename string, data []byte, perm os.FileMode) error {
	f, err := FS.OpenFile(CTX, filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, perm)
	if err != nil {
		return err
	}
	n, err := f.Write(data)
	if err == nil && n < len(data) {
		err = io.ErrShortWrite
	}
	if err1 := f.Close(); err == nil {
		err = err1
	}
	return err
}

// FileNames is a list of files included in this filebox
var FileNames = []string{
	"./404.html",
	"./500.html",
}
